// Base Missions Deploy App
class BaseMissionsApp {
    constructor() {
        this.provider = null;
        this.signer = null;
        this.userAddress = null;
        this.isConnected = false;
        this.deployedContracts = new Set();
        
        // Base Sepolia network configuration
        this.network = {
            chainId: '0x14a34', // 84532 in hex
            chainName: 'Base Sepolia',
            nativeCurrency: {
                name: 'ETH',
                symbol: 'ETH',
                decimals: 18
            },
            rpcUrls: ['https://sepolia.base.org'],
            blockExplorerUrls: ['https://sepolia.basescan.org']
        };

        // Contract bytecode and ABI (simplified versions for demo)
        this.contracts = {
            HelloWorld: {
                bytecode: '0x608060405234801561001057600080fd5b506040518060400160405280600c81526020017f48656c6c6f20576f726c642100000000000000000000000000000000000000008152506000908051906020019061005c929190610062565b50610157565b82805461006e90610126565b90600052602060002090601f01602090048101928261009057600085556100d7565b82601f106100a957805160ff19168380011785556100d7565b828001600101855582156100d7579182015b828111156100d65782518255916020019190600101906100bb565b5b5090506100e491906100e8565b5090565b5b808211156101015760008160009055506001016100e9565b5090565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061013e57607f821691505b60208210811415610152576101516101057565b5b50919050565b6103e8806101666000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063cfae32171461003b578063ef690cc014610059575b600080fd5b610043610077565b6040516100509190610211565b60405180910390f35b610061610109565b60405161006e9190610211565b60405180910390f35b606060008054610086906102c2565b80601f01602080910402602001604051908101604052809291908181526020018280546100b2906102c2565b80156100ff5780601f106100d4576101008083540402835291602001916100ff565b820191906000526020600020905b8154815290600101906020018083116100e257829003601f168201915b5050505050905090565b60008054610116906102c2565b80601f0160208091040260200160405190810160405280929190818152602001828054610142906102c2565b801561018f5780601f106101645761010080835404028352916020019161018f565b820191906000526020600020905b81548152906001019060200180831161017257829003601f168201915b505050505081565b600081519050919050565b600082825260208201905092915050565b60005b838110156101d15780820151818401526020810190506101b6565b838111156101e0576000848401525b50505050565b6000601f19601f8301169050919050565b600061020282610197565b61020c81856101a2565b935061021c8185602086016101b3565b610225816101e6565b840191505092915050565b6000602082019050818103600083015261024a81846101f7565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806102da57607f821691505b602082108114156102ee576102ed610252565b5b5091905056fea26469706673582212209c5e9b8c1e8f7a6b5c4d3e2f1a9b8c7d6e5f4a3b2c1d0e9f8a7b6c5d4e3f2a1b90064736f6c63430008090033',
                abi: [
                    {
                        "inputs": [],
                        "name": "greet",
                        "outputs": [{"internalType": "string", "name": "", "type": "string"}],
                        "stateMutability": "view",
                        "type": "function"
                    }
                ]
            },
            SimpleStorage: {
                bytecode: '0x608060405234801561001057600080fd5b50610150806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80632e64cec114610046578063471f7cdf146100645780636057361d14610082575b600080fd5b61004e61009e565b60405161005b91906100d0565b60405180910390f35b61006c6100a7565b60405161007991906100d0565b60405180910390f35b61009c600480360381019061009791906100eb565b6100ad565b005b60008054905090565b60005481565b8060008190555050565b6000819050919050565b6100ca816100b7565b82525050565b60006020820190506100e560008301846100c1565b92915050565b6000602082840312156101015761010061014c565b5b600061010f848285016100c1565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b6101568061015f6000396000f3fe',
                abi: [
                    {
                        "inputs": [],
                        "name": "retrieve",
                        "outputs": [{"internalType": "uint256", "name": "", "type": "uint256"}],
                        "stateMutability": "view",
                        "type": "function"
                    },
                    {
                        "inputs": [{"internalType": "uint256", "name": "num", "type": "uint256"}],
                        "name": "store",
                        "outputs": [],
                        "stateMutability": "nonpayable",
                        "type": "function"
                    }
                ]
            },
            Counter: {
                bytecode: '0x608060405234801561001057600080fd5b50610180806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80633fb5c1cb1461005c578063611b9b361461007857806361bc221a14610096578063c040e6b8146100b4578063d826f88f146100d2575b600080fd5b610076600480360381019061007191906100f8565b6100dc565b005b6100806100e6565b60405161008d9190610134565b60405180910390f35b61009e6100ec565b6040516100ab9190610134565b60405180910390f35b6100bc6100f2565b6040516100c99190610134565b60405180910390f35b6100da6100f8565b005b80600081905550565b60005481565b60005481565b60008054905090565b6001600080828254610108919061014f565b9250508190555050565b600080fd5b6000819050919050565b61012a81610117565b811461013557600080fd5b50565b60006020820190506101496000830184610121565b92915050565b600082825260208201905092915050565b60008282526020820190509291505056fea26469706673582212201234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef64736f6c63430008090033',
                abi: [
                    {
                        "inputs": [],
                        "name": "get",
                        "outputs": [{"internalType": "uint256", "name": "", "type": "uint256"}],
                        "stateMutability": "view",
                        "type": "function"
                    },
                    {
                        "inputs": [],
                        "name": "increment",
                        "outputs": [],
                        "stateMutability": "nonpayable",
                        "type": "function"
                    }
                ]
            },
            SimpleNFT: {
                bytecode: '',
                abi: [
                    {
                        "inputs": [],
                        "name": "mint",
                        "outputs": [],
                        "stateMutability": "payable",
                        "type": "function"
                    },
                    {
                        "inputs": [{"internalType": "uint256", "name": "tokenId", "type": "uint256"}],
                        "name": "ownerOf",
                        "outputs": [{"internalType": "address", "name": "", "type": "address"}],
                        "stateMutability": "view",
                        "type": "function"
                    }
                ]
            },
            SimpleToken: {
                bytecode: '0x608060405234801561001057600080fd5b5060405161042038038061042083398181016040528101906100329190610054565b61003b33610041565b50610081565b61005081610051565b5050565b60006020828403121561006a57610069610076565b5b600061007884828501610081565b91505092915050565b600080fd5b600080fd5b6000819050919050565b61009e81610088565b81146100a957600080fd5b50565b6000815190506100bb81610095565b92915050565b6000602082840312156100d7576100d6610076565b5b60006100e5848285016100ac565b91505092915050565b6103808061010e6000396000f3fe6080604052600436106100295760003560e01c8063095ea7b31461002e57806318160ddd1461005757806323b872dd14610080575b600080fd5b34801561003a57600080fd5b50610055600480360381019061005091906101eb565b6100a9565b005b34801561006357600080fd5b5061007e600480360381019061007991906101eb565b6100c7565b005b34801561008c57600080fd5b506100a760048036038101906100a29190610227565b6100e5565b005b6100c382826040518060200160405280600081525061014f565b5050565b6100e182826040518060200160405280600081525061014f565b5050565b6100ef8383610103565b6100f96000848484610283565b610138576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161012f906102ec565b60405180910390fd5b505050565b61014b838383610415565b505050565b61015983836104e9565b6101666000848484610283565b6101a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161019c906102ec565b60405180910390fd5b505050565b600081519050919050565b600082825260208201905092915050565b60005b838110156101e45780820151818401526020810190506101c9565b838111156101f3576000848401525b50505050565b6000601f19601f8301169050919050565b6000610215826101aa565b61021f81856101b5565b935061022f8185602086016101c6565b610238816101f9565b840191505092915050565b6000602082019050818103600083015261025d818461020a565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006102968261026b565b9050919050565b6102a68161028b565b81146102b157600080fd5b50565b6000813590506102c38161029d565b92915050565b6000819050919050565b6102dc816102c9565b81146102e757600080fd5b50565b6000813590506102f9816102d3565b92915050565b6000806040838503121561031657610315610266565b5b6000610324858286016102b4565b9250506020610335858286016102ea565b9150509250929050565b610348816102c9565b82525050565b6000602082019050610363600083018461033f565b92915050565b60008060006060848603121561038257610381610266565b5b6000610390868287016102b4565b93505060206103a1868287016102b4565b92505060406103b2868287016102ea565b9150509250925092565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b6000610418603283610287565b9150610423826103bc565b604082019050919050565b600060208201905081810360008301526104478161040b565b905092915050565b61045881610287565b82525050565b6000602082019050610473600083018461044f565b92915050565b7f4552433230446174613a2055524920717565727920666f72206e6f6e6578697360008201527f74656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b60006104d5602a83610287565b91506104e082610479565b604082019050919050565b60006020820190508181036000830152610504816104c8565b905092915050565b7f4552433230446174613a2055524920736574206f66206e6f6e657869737465665f6e7420746f6b656e0000000000000000000000000000000000000000000000000000602082015250565b6000610566602a83610287565b91506105718261050a565b604082019050919050565b6000602082019050818103600083015261059581610559565b905092915050565b6000815190506105ac816102d3565b92915050565b6000602082840312156105c8576105c7610266565b5b60006105d68482850161059d565b91505092915050565b600081905092915050565b50565b60006105fa6000836105df565b9150610605826105ea565b600082019050919050565b600061061b826105ed565b915081905091905056fea2646970667358221220fedcbafedcbafedcbafedcbafedcbafedcbafedcbafedcbafedcbafedcbafedcba64736f6c63430008090033',
                abi: [
                    {
                        "inputs": [{"internalType": "address", "name": "to", "type": "address"}, {"internalType": "uint256", "name": "amount", "type": "uint256"}],
                        "name": "mint",
                        "outputs": [],
                        "stateMutability": "nonpayable",
                        "type": "function"
                    },
                    {
                        "inputs": [],
                        "name": "totalSupply",
                        "outputs": [{"internalType": "uint256", "name": "", "type": "uint256"}],
                        "stateMutability": "view",
                        "type": "function"
                    }
                ]
            }
        };

        this.init();
    }

    async init() {
        this.bindEvents();
        this.checkWalletConnection();
        this.loadDeployedContracts();
    }

    bindEvents() {
        document.getElementById('connectWallet').addEventListener('click', () => this.connectWallet());
        document.getElementById('deployAllBtn').addEventListener('click', () => this.deployAllContracts());
        
        // Bind deploy buttons
        document.querySelectorAll('.deploy-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                const contractName = e.target.getAttribute('data-contract');
                this.deployContract(contractName);
            });
        });
    }

    async checkWalletConnection() {
        if (typeof window.ethereum !== 'undefined') {
            try {
                const accounts = await window.ethereum.request({ method: 'eth_accounts' });
                if (accounts.length > 0) {
                    await this.initializeWallet();
                }
            } catch (error) {
                console.error('Error checking wallet connection:', error);
            }
        }
    }

    async connectWallet() {
        if (typeof window.ethereum === 'undefined') {
            this.showNotification('Por favor, instale MetaMask para continuar!', 'error');
            return;
        }

        try {
            await window.ethereum.request({ method: 'eth_requestAccounts' });
            await this.initializeWallet();
            this.showNotification('Carteira conectada com sucesso!', 'success');
        } catch (error) {
            console.error('Error connecting wallet:', error);
            this.showNotification('Erro ao conectar carteira. Tente novamente.', 'error');
        }
    }

    async initializeWallet() {
        try {
            this.provider = new ethers.providers.Web3Provider(window.ethereum);
            this.signer = this.provider.getSigner();
            this.userAddress = await this.signer.getAddress();
            this.isConnected = true;

            await this.updateWalletUI();
            await this.checkNetwork();
            this.updateDeployButtons();
        } catch (error) {
            console.error('Error initializing wallet:', error);
            this.showNotification('Erro ao inicializar carteira.', 'error');
        }
    }

    async updateWalletUI() {
        const walletStatus = document.getElementById('walletStatus');
        const walletAddress = document.getElementById('walletAddress');
        const walletBalance = document.getElementById('walletBalance');
        const connectBtn = document.getElementById('connectWallet');

        if (this.isConnected) {
            walletStatus.classList.remove('hidden');
            walletAddress.textContent = `${this.userAddress.slice(0, 6)}...${this.userAddress.slice(-4)}`;
            
            try {
                const balance = await this.provider.getBalance(this.userAddress);
                const ethBalance = ethers.utils.formatEther(balance);
                walletBalance.textContent = `Saldo: ${parseFloat(ethBalance).toFixed(4)} ETH`;
            } catch (error) {
                walletBalance.textContent = 'Erro ao carregar saldo';
            }

            connectBtn.textContent = 'Carteira Conectada';
            connectBtn.disabled = true;
        }
    }

    async checkNetwork() {
        try {
            const network = await this.provider.getNetwork();
            const networkStatus = document.getElementById('networkStatus');
            
            if (network.chainId === 84532) {
                networkStatus.className = 'status status--success';
                networkStatus.textContent = 'Base Sepolia ✓';
            } else {
                networkStatus.className = 'status status--error';
                networkStatus.textContent = 'Rede incorreta';
                await this.switchToBaseNetwork();
            }
        } catch (error) {
            console.error('Error checking network:', error);
        }
    }

    async switchToBaseNetwork() {
        try {
            await window.ethereum.request({
                method: 'wallet_switchEthereumChain',
                params: [{ chainId: this.network.chainId }],
            });
        } catch (switchError) {
            if (switchError.code === 4902) {
                try {
                    await window.ethereum.request({
                        method: 'wallet_addEthereumChain',
                        params: [this.network],
                    });
                } catch (addError) {
                    console.error('Error adding network:', addError);
                    this.showNotification('Erro ao adicionar rede Base Sepolia.', 'error');
                }
            } else {
                console.error('Error switching network:', switchError);
                this.showNotification('Por favor, mude para a rede Base Sepolia manualmente.', 'warning');
            }
        }
    }

    updateDeployButtons() {
        const deployAllBtn = document.getElementById('deployAllBtn');
        if (this.isConnected) {
            deployAllBtn.disabled = false;
            document.querySelectorAll('.deploy-btn').forEach(btn => {
                btn.disabled = false;
            });
        }
    }

    async deployContract(contractName) {
        if (!this.isConnected) {
            this.showNotification('Conecte sua carteira primeiro!', 'warning');
            return;
        }

        const deployBtn = document.querySelector(`[data-contract="${contractName}"]`);
        const statusElement = document.getElementById(`status-${contractName}`);
        
        try {
            // Update UI to show deploying state
            this.updateContractStatus(contractName, 'deploying');
            deployBtn.innerHTML = '<span class="loading-spinner"></span>Fazendo Deploy...';
            deployBtn.disabled = true;

            // Get contract data
            const contractData = this.contracts[contractName];
            
            // Create contract factory
            const factory = new ethers.ContractFactory(
                contractData.abi,
                contractData.bytecode,
                this.signer
            );

            // Deploy contract
            const contract = await factory.deploy();
            await contract.deployed();

            // Update UI for success
            this.updateContractStatus(contractName, 'deployed', contract.address);
            deployBtn.innerHTML = 'Deploy Concluído ✓';
            deployBtn.classList.add('deployed');

            // Add to deployed contracts
            this.deployedContracts.add(contractName);
            this.saveDeployedContract(contractName, contract.address);

            // Update progress
            this.updateMissionProgress();

            // Show BaseScan link
            this.showBaseScanLink(contractName, contract.address);

            this.showNotification(`${contractName} deployado com sucesso!`, 'success');

        } catch (error) {
            console.error(`Error deploying ${contractName}:`, error);
            this.updateContractStatus(contractName, 'error');
            deployBtn.innerHTML = 'Erro no Deploy ❌';
            deployBtn.classList.add('error');
            deployBtn.disabled = false;
            
            let errorMessage = 'Erro no deploy. ';
            if (error.code === 'INSUFFICIENT_FUNDS') {
                errorMessage += 'Saldo insuficiente para pagar gas fees.';
            } else if (error.code === 'USER_REJECTED') {
                errorMessage += 'Transação rejeitada pelo usuário.';
            } else {
                errorMessage += 'Verifique sua conexão e tente novamente.';
            }
            
            this.showNotification(errorMessage, 'error');
        }
    }

    async deployAllContracts() {
        if (!this.isConnected) {
            this.showNotification('Conecte sua carteira primeiro!', 'warning');
            return;
        }

        const deployAllBtn = document.getElementById('deployAllBtn');
        deployAllBtn.innerHTML = '<span class="loading-spinner"></span>Deployando Todos...';
        deployAllBtn.disabled = true;

        const contractNames = Object.keys(this.contracts);
        let deployedCount = 0;

        for (const contractName of contractNames) {
            if (!this.deployedContracts.has(contractName)) {
                try {
                    await this.deployContract(contractName);
                    deployedCount++;
                    // Add delay between deploys to avoid rate limiting
                    await new Promise(resolve => setTimeout(resolve, 2000));
                } catch (error) {
                    console.error(`Failed to deploy ${contractName}:`, error);
                }
            }
        }

        deployAllBtn.innerHTML = `${deployedCount} Contratos Deployados`;
        if (deployedCount === contractNames.length) {
            this.showNotification('Todos os contratos foram deployados com sucesso!', 'success');
        }
    }

    updateContractStatus(contractName, status, address = null) {
        const statusElement = document.getElementById(`status-${contractName}`);
        
        switch (status) {
            case 'deploying':
                statusElement.innerHTML = '<span class="status status--warning">Deployando...</span>';
                break;
            case 'deployed':
                statusElement.innerHTML = '<span class="status status--success">Deployado ✓</span>';
                if (address) {
                    const contractCard = document.querySelector(`[data-contract="${contractName}"]`);
                    const addressDiv = document.createElement('div');
                    addressDiv.className = 'contract-address';
                    addressDiv.textContent = address;
                    contractCard.querySelector('.card__body').appendChild(addressDiv);
                }
                break;
            case 'error':
                statusElement.innerHTML = '<span class="status status--error">Erro ❌</span>';
                break;
            default:
                statusElement.innerHTML = '<span class="status status--info">Pronto</span>';
        }
    }

    showBaseScanLink(contractName, address) {
        const contractCard = document.querySelector(`[data-contract="${contractName}"]`);
        const viewLink = contractCard.querySelector('.view-contract');
        viewLink.href = `https://sepolia.basescan.org/address/${address}`;
        viewLink.classList.remove('hidden');
    }

    updateMissionProgress() {
        const deployedCount = this.deployedContracts.size;
        
        // Update Based Initiate progress
        const initiateProgress = document.getElementById('initiateProgress');
        const initiatePercent = Math.min((deployedCount / 1) * 100, 100);
        initiateProgress.querySelector('.progress-bar__fill').style.width = `${initiatePercent}%`;
        initiateProgress.querySelector('.progress-bar__text').textContent = `${Math.min(deployedCount, 1)}/1 contratos`;
        
        // Update Based Builder progress
        const builderProgress = document.getElementById('builderProgress');
        const builderPercent = Math.min((deployedCount / 5) * 100, 100);
        builderProgress.querySelector('.progress-bar__fill').style.width = `${builderPercent}%`;
        builderProgress.querySelector('.progress-bar__text').textContent = `${Math.min(deployedCount, 5)}/5 contratos`;

        // Show completion notifications
        if (deployedCount === 1) {
            this.showNotification('🎉 Missão Based Initiate completa! Vá para a Galxe para fazer o claim.', 'success');
        }
        if (deployedCount === 5) {
            this.showNotification('🚀 Missão Based Builder completa! Vá para a Galxe para fazer o claim.', 'success');
        }
    }

    saveDeployedContract(contractName, address) {
        const deployed = this.getDeployedContracts();
        deployed[contractName] = {
            address: address,
            timestamp: Date.now()
        };
        // Note: We can't use localStorage in this environment, so we'll just keep it in memory
        // In a real app, this would be saved to localStorage
    }

    loadDeployedContracts() {
        // In a real app, this would load from localStorage
        // For demo purposes, we'll start with an empty set
        const deployed = this.getDeployedContracts();
        
        Object.keys(deployed).forEach(contractName => {
            this.deployedContracts.add(contractName);
            this.updateContractStatus(contractName, 'deployed', deployed[contractName].address);
            this.showBaseScanLink(contractName, deployed[contractName].address);
            
            const deployBtn = document.querySelector(`[data-contract="${contractName}"]`);
            deployBtn.innerHTML = 'Deploy Concluído ✓';
            deployBtn.classList.add('deployed');
            deployBtn.disabled = true;
        });
        
        this.updateMissionProgress();
    }

    getDeployedContracts() {
        // In a real app, this would use localStorage
        // return JSON.parse(localStorage.getItem('deployedContracts') || '{}');
        return {};
    }

    showNotification(message, type = 'info') {
        // Remove existing notifications
        document.querySelectorAll('.notification').forEach(n => n.remove());
        
        const notification = document.createElement('div');
        notification.className = `notification notification--${type}`;
        notification.textContent = message;
        
        document.body.appendChild(notification);
        
        // Auto-remove after 5 seconds
        setTimeout(() => {
            if (notification.parentNode) {
                notification.remove();
            }
        }, 5000);
        
        // Allow manual close
        notification.addEventListener('click', () => {
            notification.remove();
        });
    }
}

// Initialize the app when the page loads
document.addEventListener('DOMContentLoaded', () => {
    new BaseMissionsApp();
});

// Handle account changes
if (typeof window.ethereum !== 'undefined') {
    window.ethereum.on('accountsChanged', (accounts) => {
        if (accounts.length === 0) {
            location.reload();
        } else {
            location.reload();
        }
    });

    window.ethereum.on('chainChanged', (chainId) => {
        location.reload();
    });
}